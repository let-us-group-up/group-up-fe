"""Address"""
type Address {
  address1: String!
  address2: String!
  id: ID!
}

union AddressAndIDUnion = AddressIDUnionPart | AddressUnionPart

type AddressIDUnionPart {
  address: String!
}

type AddressUnionPart {
  address: Address!
}

"""Date custom scalar type"""
scalar Date

"""Event"""
type Event {
  address: AddressAndIDUnion
  dateAndTime: Date
  description: String
  id: ID!
  messenger: MessengerAndIDUnion
  participants: [Participant!]!
  title: String!
}

"""Messenger"""
type Messenger {
  id: ID!
  provider: Provider!
}

union MessengerAndIDUnion = MessengerIDUnionPart | MessengerUnionPart

type MessengerIDUnionPart {
  messenger: String!
}

type MessengerUnionPart {
  messenger: Messenger!
}

type Mutation {
  createEvent(author: ID!, title: String!): Event!
  createUser(email: String!): User!
}

"""Participant"""
type Participant {
  role: Roles!
  user: UserAndIDUnion
}

enum Provider {
  Telegram
}

type Query {
  event(id: ID!): Event
  user(id: ID!): User
}

enum Roles {
  Organizer
  Participant
}

"""User"""
type User {
  email: String!
  id: ID!
}

union UserAndIDUnion = UserIDUnionPart | UserUnionPart

type UserIDUnionPart {
  user: String!
}

type UserUnionPart {
  user: User!
}
